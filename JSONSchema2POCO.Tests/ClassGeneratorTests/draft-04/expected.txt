//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class TestClass
    {
        
        public string Id;
        
        public string Schema;
        
        public string Title;
        
        public string Description;
        
        public Default Default;
        
        public decimal MultipleOf;
        
        public decimal Maximum;
        
        public bool ExclusiveMaximum;
        
        public decimal Minimum;
        
        public bool ExclusiveMinimum;
        
        public PositiveInteger MaxLength;
        
        public PositiveIntegerDefault0 MinLength;
        
        public string Pattern;
        
        public AdditionalItems AdditionalItems;
        
        public Items Items;
        
        public PositiveInteger MaxItems;
        
        public PositiveIntegerDefault0 MinItems;
        
        public bool UniqueItems;
        
        public PositiveInteger MaxProperties;
        
        public PositiveIntegerDefault0 MinProperties;
        
        public StringArray Required;
        
        public AdditionalProperties AdditionalProperties;
        
        public Definitions Definitions;
        
        public Properties Properties;
        
        public PatternProperties PatternProperties;
        
        public Dependencies Dependencies;
        
        public Enum Enum;
        
        public Type Type;
        
        public string Format;
        
        public SchemaArray AllOf;
        
        public SchemaArray AnyOf;
        
        public SchemaArray OneOf;
        
        public TestClass Not;
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;


namespace example
{
    
    
    public class SchemaArray : List<TestClass>
    {
        
        // Hiding visiblity of default constructor as a minimum of 1 elements is required
        private SchemaArray()
        {
        }
        
        public SchemaArray(IEnumerable<TestClass> collection)
        {
            if (collection.Count() < 1)
            {
                throw new System.ArgumentException();
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class PositiveInteger
    {
        
        public int Value
        {
            get
            {
                return this.Value;
            }
            set
            {
                if ((value < 0))
                {
                    throw new System.ArgumentOutOfRangeException();
                }
                this.Value = value;
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class PositiveIntegerDefault0
    {
        
        public int Value
        {
            get
            {
                return this.Value;
            }
            set
            {
                if ((value < 0))
                {
                    throw new System.ArgumentOutOfRangeException();
                }
                this.Value = value;
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;


namespace example
{
    
    
    public class SimpleTypes
    {
        
        public static readonly String array = "array";
        
        public static readonly String boolean = "boolean";
        
        public static readonly String integer = "integer";
        
        public static readonly String _null = "null";
        
        public static readonly String number = "number";
        
        public static readonly String _object = "object";
        
        public static readonly String _string = "string";
        
        private static HashSet<string> Constants = new HashSet<string>(new string[] {
                    array,
                    boolean,
                    integer,
                    _null,
                    number,
                    _object,
                    _string});
        
        private string Value;
        
		public static implicit operator String(SimpleTypes d) => d.Value;
		public static explicit operator SimpleTypes(String v) => new SimpleTypes(v);
        
        // Hiding visiblity of default constructor
        private SimpleTypes()
        {
        }
        
        public SimpleTypes(String value)
        {
            if (!Constants.Contains(value))
            {
                throw new System.ArgumentException("Value is not part of enum");
            }
            Value = value;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;


namespace example
{
    
    
    public class StringArray : List<string>
    {
        
        // Hiding visiblity of default constructor as a minimum of 1 elements is required
        private StringArray()
        {
        }
        
        public StringArray(IEnumerable<String> collection)
        {
            if (collection.Count() < 1)
            {
                throw new System.ArgumentException();
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class Default
    {
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class AdditionalItems
    {
        
        private object Value;
        
		public static implicit operator Boolean(AdditionalItems d) => (Boolean)d.Value;
		public static explicit operator AdditionalItems(Boolean v) => new AdditionalItems(v);
		public static implicit operator TestClass(AdditionalItems d) => (TestClass)d.Value;
		public static explicit operator AdditionalItems(TestClass v) => new AdditionalItems(v);
        
        // Hiding visiblity of default constructor
        private AdditionalItems()
        {
        }
        
        public AdditionalItems(object value)
        {
            if (value is Boolean)
            {
                Value = value;
            }
            if (value is TestClass)
            {
                Value = value;
            }
            throw new System.ArgumentException("Value\'s type is not correct");
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class Items
    {
        
        private object Value;
        
		public static implicit operator TestClass(Items d) => (TestClass)d.Value;
		public static explicit operator Items(TestClass v) => new Items(v);
		public static implicit operator SchemaArray(Items d) => (SchemaArray)d.Value;
		public static explicit operator Items(SchemaArray v) => new Items(v);
        
        // Hiding visiblity of default constructor
        private Items()
        {
        }
        
        public Items(object value)
        {
            if (value is TestClass)
            {
                Value = value;
            }
            if (value is SchemaArray)
            {
                Value = value;
            }
            throw new System.ArgumentException("Value\'s type is not correct");
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class AdditionalProperties
    {
        
        private object Value;
        
		public static implicit operator Boolean(AdditionalProperties d) => (Boolean)d.Value;
		public static explicit operator AdditionalProperties(Boolean v) => new AdditionalProperties(v);
		public static implicit operator TestClass(AdditionalProperties d) => (TestClass)d.Value;
		public static explicit operator AdditionalProperties(TestClass v) => new AdditionalProperties(v);
        
        // Hiding visiblity of default constructor
        private AdditionalProperties()
        {
        }
        
        public AdditionalProperties(object value)
        {
            if (value is Boolean)
            {
                Value = value;
            }
            if (value is TestClass)
            {
                Value = value;
            }
            throw new System.ArgumentException("Value\'s type is not correct");
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;


namespace example
{
    
    
    public class Definitions : Dictionary<string, TestClass>
    {
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;


namespace example
{
    
    
    public class Properties : Dictionary<string, TestClass>
    {
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;


namespace example
{
    
    
    public class PatternProperties : Dictionary<string, TestClass>
    {
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;


namespace example
{
    
    
    public class Dependencies : Dictionary<string, DependenciesAdditionalProperties>
    {
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class DependenciesAdditionalProperties
    {
        
        private object Value;
        
		public static implicit operator TestClass(DependenciesAdditionalProperties d) => (TestClass)d.Value;
		public static explicit operator DependenciesAdditionalProperties(TestClass v) => new DependenciesAdditionalProperties(v);
		public static implicit operator StringArray(DependenciesAdditionalProperties d) => (StringArray)d.Value;
		public static explicit operator DependenciesAdditionalProperties(StringArray v) => new DependenciesAdditionalProperties(v);
        
        // Hiding visiblity of default constructor
        private DependenciesAdditionalProperties()
        {
        }
        
        public DependenciesAdditionalProperties(object value)
        {
            if (value is TestClass)
            {
                Value = value;
            }
            if (value is StringArray)
            {
                Value = value;
            }
            throw new System.ArgumentException("Value\'s type is not correct");
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;


namespace example
{
    
    
    public class Enum : List<object>
    {
        
        // Hiding visiblity of default constructor as a minimum of 1 elements is required
        private Enum()
        {
        }
        
        public Enum(IEnumerable<Object> collection)
        {
            if (collection.Count() < 1)
            {
                throw new System.ArgumentException();
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace example
{
    
    
    public class Type
    {
        
        private object Value;
        
		public static implicit operator SimpleTypes(Type d) => (SimpleTypes)d.Value;
		public static explicit operator Type(SimpleTypes v) => new Type(v);
		public static implicit operator TypeAnyOf1(Type d) => (TypeAnyOf1)d.Value;
		public static explicit operator Type(TypeAnyOf1 v) => new Type(v);
        
        // Hiding visiblity of default constructor
        private Type()
        {
        }
        
        public Type(object value)
        {
            if (value is SimpleTypes)
            {
                Value = value;
            }
            if (value is TypeAnyOf1)
            {
                Value = value;
            }
            throw new System.ArgumentException("Value\'s type is not correct");
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;


namespace example
{
    
    
    public class TypeAnyOf1 : List<object>
    {
        
        // Hiding visiblity of default constructor as a minimum of 1 elements is required
        private TypeAnyOf1()
        {
        }
        
        public TypeAnyOf1(IEnumerable<Object> collection)
        {
            if (collection.Count() < 1)
            {
                throw new System.ArgumentException();
            }
        }
    }
}

